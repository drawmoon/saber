#            _
#  ___  __ _| |__   ___ _ __
# / __|/ _` | '_ \ / _ \ '__|
# \__ \ (_| | |_) |  __/ |
# |___/\__,_|_.__/ \___|_|
#
# Copyright 2024 drash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limit#ations under the License.

# ***********************************************************************
# Saber Configuration
# ***********************************************************************
# Get the lifetime of the datasource. If fetched within the lifetime cycle, the current fetch
# moment is used as the new start point and continues for a lifetime cycle that will last until
# the next check.
# dataSourceLifetime=86400000

# Gets the upper limit of the total number of datasource. When the total number of datasource
# reaches the upper limit, it will be processed according to the predefined limiting policy.
# dataSourceLimit=10

# Get the upper limit of the total number of datasource and the corresponding limiting policy.
# Two strategies are supported: <code>StopCreate</code> and <code>Recreate</code>.
#
# StopCreate: throws an SQLException when the total number is reached.
# Recreate: When the total number of instances reaches the upper limit, destroy the
#       datasource that has been idle for the longest time and create a new instance.
# dataSourceLimitPolicies=StopCreate

# Gets the upper limit of the maximum number of connections for the connection pool.
# Automatically adjusts the maximum number of connections in the connection pool based on the
# upper limit of the total number of datasource and the maximum number of connections in the
# connection pool.
# maximumPoolSizeLimit=0

# Gets the default query wait timeout for datasource. This default value is used when no query
# wait timeout is specified, and overrides the default value if a query wait timeout is
# specified.
# queryTimeout=30

# ***********************************************************************
# HikariCP Configuration
# ***********************************************************************
# The property controls the maximum number of connections that HikariCP will keep in the pool,
# including both idle and in-use connections.
hikariConfig.maximumPoolSize=50
